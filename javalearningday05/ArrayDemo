package javalearningday05;

import java.util.Arrays;

/**
 * 数组
 * @author 小川94
 * @date 2018年3月10日
 */
public class ArrayDemo {

	public static void main(String[] args) {
		testMethod();
		arrayLength();
		seeArrayElements();
		makeArrayCopy();
		sortArrayAsc();
		sortArrayDesc();
		utilSort();
	}
	
	/**
	 * 数组的声明
	 */
	public static void testMethod() {
		// 第一种写法
		int[] array = new int[3];
		// int类型的默认值是0
		System.out.println(array[0]); // 0
		String[] strArray = new String[3];
		// 于引用类型（其中包括String），其默认值为null
		System.out.println(strArray[0]); // null
		// 数组声明的第二种写法
		int[] array2 = {1,2,3};
		System.out.println(array2[0]); // 1
		// 下面这种写法也可以，但是不建议使用，将[]紧跟在数据类型后面，方面理解和区分
		int array3[] = {4,5,6};
		System.out.println(array3[0]); // 4
	}
	
	/**
	 * 数组长度获取，元素访问
	 */
	public static void arrayLength() {
		// 获取数组的长度，使用 .length 属性
		int[] array = {1,2,3,4};
		System.out.println(array.length); // 4
		// 数组的长度一经定义，就不能改变，因为其length属性是由final关键字修饰的，不可修改
		//array.length = 5; // The final field array.length cannot be assigned
		// 访问数组的元素，使用 [元素所在下标] , 下标从0开始
		System.out.println(array[0]); // 打印数组第一个元素1
		// 下标越界后，会出现 java.lang.ArrayIndexOutOfBoundsException 的异常
		// System.out.println(array[4]); 
	}
	
	/**
	 * 数组遍历
	 */
	public static void seeArrayElements() {
		int[] array = {1,2,3,4,5};
		// for循环遍历打印
		for (int i=0; i<array.length; i++) {
			System.out.println(array[i]);
		}
		// for each遍历打印，括号中的第一个参数是元素的数据类型
		// 第二个参数是获取值的局部变量名称（可以随意命名），第三个参数是数组名
		for (int element : array) {
			System.out.println(element);
		}
	}
	
	/**
	 * 复制数组，数组扩容，无论数组是扩容还是变小，原数组是不会改变的
	 */
	public static void makeArrayCopy() {
		// 复制数组，这里用到的是java.util.Arrays类中的copyOf()方法
		int[] array = {2,4,6};
		int[] newArray = Arrays.copyOf(array, array.length);
		// 判断两个数组是否相等，用到的是Arrays类中的equals()方法
		System.out.println(Arrays.equals(array, newArray)); // true
		// 数组扩容
		int[] addLength = Arrays.copyOf(array, array.length + 1);
		System.out.println(addLength.length); // 4
		for (int e : addLength) {
			System.out.println(e); // 依次打印2 4 6 0
		}
		// 数组变小
		int[] addLength2 = Arrays.copyOf(array, array.length - 1);
		System.out.println(addLength2.length); // 2
		for (int e : addLength2) {
			System.out.println(e); // 依次打印2 4
		}
	}
	
	/**
	 * 对数组进行升序排序
	 */
	public static void sortArrayAsc() {
		// 声明并初始化一个数组
		int[] array = {2, 10, 3, 78, 1, 29, 91, 5};
		System.out.println(Arrays.toString(array));
		for (int i=0; i<array.length-1; i++) {
			for (int j=0; j<array.length-i-1; j++) {
				if (array[j] > array[j+1]) {
					int k = array[j];
					array[j] = array[j+1];
					array[j+1] = k;
				}
			}
		}
		System.out.println(Arrays.toString(array));
	}
	
	/**
	 * 对数组进行降序排序
	 */
	public static void sortArrayDesc() {
		// 声明并初始化一个数组
		int[] array = {2, 10, 3, 78, 1, 29, 91, 5};
		// 将数组变为字符串输出
		System.out.println(Arrays.toString(array));
		for (int i=0; i<array.length-1; i++) {
			for (int j=0; j<array.length-i-1; j++) {
				if (array[j] < array[j+1]) {
					int k = array[j];
					array[j] = array[j+1];
					array[j+1] = k;
				}
			}
		}
		System.out.println(Arrays.toString(array));
	}
	
	/**
	 * 利用Arrays.sort()方法进行排序
	 */
	public static void utilSort() {
		// 声明并初始化一个数组
		int[] array = {2, 10, 3, 78, 1, 29, 91, 5};
		System.out.println(Arrays.toString(array));
		Arrays.sort(array);
		System.out.println(Arrays.toString(array));
	}
}
